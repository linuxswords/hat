{{ template "head" . }}

<div id="wizard">
    <!-- Step 1: Choose Tournament -->
    <div id="step1" class="card mb-3 p-3">
        <h2 class="card-title">Step 1: Choose a Tournament</h2>
        <select id="tournamentSelect" class="form-select mb-3">
            {{ range .Tournaments }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>
        <button class="btn btn-primary" onclick="nextStep()">Next</button>
    </div>

    <!-- Step 2 & 3: Enter Scores and Display Results -->
    <div id="step2" style="display:none;">
        <div style="flex: 1; margin-right: 10px; overflow-y: auto; height: 100vh;">
            <h2>Step 2: Enter Scores</h2>
            <div id="archersList">
                <!-- Archer list with input fields will be populated dynamically -->
            </div>
        </div>
        <div style="flex: 1; margin-left: 10px;">
            <h2>Step 3: Results</h2>
            <button class="btn btn-success" onclick="saveScores()">Save Scores</button>
            <ul id="resultsList" class="list-group">
                <!-- Results will be displayed here -->
            </ul>
        </div>
    </div>
</div>

<script>
    // Existing JavaScript code...

    async function saveScores() {
        const tournamentId = document.getElementById('tournamentSelect').value;
        const results = archers.map(archer => {
            const scoreInput = document.getElementById('score_' + archer.id);
            const score = parseFloat(scoreInput.value) || 0;
            const totalScore = score * archer.handycapFactor;
            return {
                archerId: archer.id,
                originalScore: score,
                totalScore: totalScore
            };
        }).sort((a, b) => b.totalScore - a.totalScore);

        let lastScore = null;
        let lastRank = 0;
        let displayRank = 0;

        const scores = results.map((result, index) => {
            if (result.totalScore !== lastScore) {
                displayRank = index + 1;
                lastScore = result.totalScore;
            }
            lastRank = displayRank;

            return {
                archerId: result.archerId,
                score: result.originalScore,
                totalScore: result.totalScore,
                ranking: lastRank
            };
        });

        try {
            const response = await fetch('/api/scores', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ "tournamentId": parseInt(tournamentId), scores })
            });

            if (response.ok) {
                alert('Scores saved successfully!');
            } else {
                alert('Failed to save scores.');
            }
        } catch (error) {
            console.error('Error saving scores:', error);
            alert('Error saving scores.');
        }
    }
</script>

<script>
    let currentStep = 1;
    let tournaments = [];
    let archers = [];

    async function fetchArchers() {
        try {
            const tournamentId = document.getElementById('tournamentSelect').value;
            console.log('tournamentId:', tournamentId);
            const archerResponse = await fetch('/api/archers/tournament/' + tournamentId);
            archers = await archerResponse.json();
            console.log('archers:', archers);
            const archersList = document.getElementById('archersList');
            archersList.innerHTML = archers.map(a => `
                <div class="card mb-2" style="padding: 5px;">
                    <div class="card-body" style="padding: 10px;">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title" style="margin-bottom: 5px;">${a.name}</h5>
                            <span class="badge bg-secondary" style="font-size: 0.9em;">Factor: ${a.handycapFactor}</span>
                        </div>
                        <p class="card-text" style="margin-bottom: 5px;">Bow Class: ${a.bowclassName} (${a.bowclassCode})</p>
                        <input type="number" class="form-control" id="score_${a.id}" placeholder="Enter score" oninput="updateResults()" style="margin-bottom: 5px;">
                    </div>
                </div>
            `).join('');
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    function nextStep() {
        document.getElementById('step' + currentStep).style.display = 'none';
        currentStep++;
        if (currentStep === 2) {
            fetchArchers();
            document.getElementById('step' + currentStep).style.display = 'flex';
        }
    }

    function updateResults() {
        const results = archers.map(archer => {
            const scoreInput = document.getElementById('score_' + archer.id);
            const score = parseFloat(scoreInput.value) || 0;
            return {
                name: archer.name,
                bowclassCode: archer.bowclassCode,
                originalScore: score,
                handycapFactor: archer.handycapFactor,
                totalScore: score * archer.handycapFactor
            };
        }).sort((a, b) => b.totalScore - a.totalScore);

        const resultsList = document.getElementById('resultsList');
        let lastScore = null;
        let lastRank = 0;
        let displayRank = 0;

        resultsList.innerHTML = results.map((result, index) => {
            let borderColor = '';
            if (index === 0) borderColor = 'border: 4px solid gold;';
            else if (index === 1) borderColor = 'border: 4px solid silver;';
            else if (index === 2) borderColor = 'border: 4px solid #cd7f32;'; // bronze

            if (result.totalScore !== lastScore) {
                displayRank = index + 1;
                lastScore = result.totalScore;
            }
            lastRank = displayRank;

            return `
            <li class="list-group-item" style="${borderColor}; margin-bottom: 20px; padding: 25px;">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex justify-content-end" style="margin-right: 20px;">
                        <strong>${lastRank}</strong>
                    </div>
                    <div class="d-flex justify-content-between" style="margin-right: 20px; width: 100%;">
                        <strong style="flex-grow: 1; text-align: left;">${result.name}</strong>
                        <small style="text-align: right;">(${result.bowclassCode})</small>
                    </div>
                    <div class="d-flex justify-content-end">
                        <span class="badge bg-light text-dark" style="margin-right: 15px;">Score: ${result.originalScore}</span>
                        <span class="badge bg-light text-dark" style="margin-right: 15px;">Factor: ${result.handycapFactor}</span>
                        <span class="badge bg-primary" style="font-size: 1.2em;">Total: ${result.totalScore.toFixed(2)}</span>
                    </div>
                </div>
            </li>
            `;
        }).join('');
    }

</script>

{{ template "footer" }}
